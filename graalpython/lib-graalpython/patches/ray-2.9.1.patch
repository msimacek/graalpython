diff --git a/.bazelrc b/.bazelrc
index c9ba801319..6c25d57934 100644
--- a/.bazelrc
+++ b/.bazelrc
@@ -37,6 +37,9 @@ test --test_env=RAY_USAGE_STATS_REPORT_URL="http://127.0.0.1:8000"
 # Enable cluster mode for OSX and Windows. By default, Ray
 # will not allow multinode OSX and Windows clusters.
 test --test_env=RAY_ENABLE_WINDOWS_OR_OSX_CLUSTER="1"
+
+test --jobs=8
+test --local_ram_resources=8192
 # This is needed for some core tests to run correctly
 build:windows --enable_runfiles
 # TODO(mehrdadn): Revert the "-\\.(asm|S)$" exclusion when this Bazel bug
@@ -92,12 +95,12 @@ build:manylinux2010 --linkopt="-lrt"
 
 # LLVM (clang & libc++) build flags common across Linux installations and systems.
 # On Ubuntu, the remaining configurations can be generated by running ci/env/install-llvm-binaries.sh
-build:llvm --action_env=CXXFLAGS=-stdlib=libc++
-build:llvm --action_env=LDFLAGS=-stdlib=libc++
-build:llvm --action_env=BAZEL_CXXOPTS=-stdlib=libc++
-build:llvm --action_env=BAZEL_LINKLIBS=-l%:libc++.a:-l%:libc++abi.a
-build:llvm --action_env=BAZEL_LINKOPTS=-lm:-pthread
-build:llvm --define force_libcpp=enabled
+# build:llvm --action_env=CXXFLAGS=-stdlib=libc++
+# build:llvm --action_env=LDFLAGS=-stdlib=libc++
+# build:llvm --action_env=BAZEL_CXXOPTS=-stdlib=libc++
+# build:llvm --action_env=BAZEL_LINKLIBS=-l%:libc++.a:-l%:libc++abi.a
+# build:llvm --action_env=BAZEL_LINKOPTS=-lm:-pthread
+# build:llvm --define force_libcpp=enabled
 
 # Thread sanitizer configuration:
 build:tsan --per_file_copt="-bazel-ray/external/com_github_antirez_redis/.*$@-fsanitize=thread"
diff --git a/bazel/ray.bzl b/bazel/ray.bzl
index 4cd1aa2390..95250a422c 100644
--- a/bazel/ray.bzl
+++ b/bazel/ray.bzl
@@ -30,6 +30,9 @@ PYX_COPTS = select({
     "//conditions:default": [
         # Ignore this warning since CPython and Cython have issue removing deprecated tp_print on MacOS
         "-Wno-deprecated-declarations",
+        "-Wno-unused-variable",
+        "-Wno-unused-function",
+        "-Wno-sign-compare",
     ],
 }) + select({
     "@bazel_tools//src/conditions:windows": [
diff --git a/bazel/ray_deps_setup.bzl b/bazel/ray_deps_setup.bzl
index f91eb303c4..b0d11eafe6 100644
--- a/bazel/ray_deps_setup.bzl
+++ b/bazel/ray_deps_setup.bzl
@@ -188,6 +188,10 @@ def ray_deps_setup():
         build_file = True,
         url = "https://github.com/cython/cython/archive/c48361d0a0969206e227ec016f654c9d941c2b69.tar.gz",
         sha256 = "37c466fea398da9785bc37fe16f1455d2645d21a72e402103991d9e2fa1c6ff3",
+        patch_cmds = [
+            'graalpy -m autopatch_capi .',
+            '''patch -p1 < "$(graalpy -c 'print(__graalpython__.core_home)')/patches/Cython/Cython-0.29.32.patch"''',
+        ],
     )
 
     auto_http_archive(
diff --git a/dashboard/optional_deps.py b/dashboard/optional_deps.py
index 1dfaaca..6eeb618 100644
--- a/dashboard/optional_deps.py
+++ b/dashboard/optional_deps.py
@@ -15,7 +15,7 @@ import aiohttp_cors  # noqa: F401
 from aiohttp import hdrs  # noqa: F401
 from aiohttp.typedefs import PathLike  # noqa: F401
 from aiohttp.web import RouteDef  # noqa: F401
-import pydantic  # noqa: F401
+# import pydantic  # noqa: F401
 import grpc  # noqa: F401
 
 # Adding new modules should also be reflected in the
diff --git a/doc/requirements-doc.txt b/doc/requirements-doc.txt
index f96158b..f584ac3 100644
--- a/doc/requirements-doc.txt
+++ b/doc/requirements-doc.txt
@@ -1,6 +1,6 @@
 # Production requirements. This is what readthedocs.com picks up
 
-watchfiles==0.19.0 # Required because sphinx-click doesn't support mocking
+# watchfiles==0.19.0 # Required because sphinx-click doesn't support mocking
 
 # Syntax highlighting
 Pygments==2.16.1
diff --git a/doc/source/conf.py b/doc/source/conf.py
index 477c25d..6a6c2f4 100644
--- a/doc/source/conf.py
+++ b/doc/source/conf.py
@@ -496,7 +496,7 @@ autodoc_mock_imports = [
     "tree",
     "uvicorn",
     "wandb",
-    "watchfiles",
+    # "watchfiles",
     "xgboost",
     "xgboost_ray",
     "psutil",
diff --git a/doc/source/ray-overview/pip_freeze_ray-ml-py39-cpu.txt b/doc/source/ray-overview/pip_freeze_ray-ml-py39-cpu.txt
index ddcddd7..25492db 100644
--- a/doc/source/ray-overview/pip_freeze_ray-ml-py39-cpu.txt
+++ b/doc/source/ray-overview/pip_freeze_ray-ml-py39-cpu.txt
@@ -459,7 +459,7 @@ uvicorn==0.22.0
 uvloop==0.19.0
 virtualenv==20.21.0
 wandb==0.13.4
-watchfiles==0.19.0
+# watchfiles==0.19.0
 wcwidth==0.2.12
 webcolors==1.13
 webencodings==0.5.1
diff --git a/doc/source/ray-overview/pip_freeze_ray-py39-cpu.txt b/doc/source/ray-overview/pip_freeze_ray-py39-cpu.txt
index 8f56dcb..e14a213 100644
--- a/doc/source/ray-overview/pip_freeze_ray-py39-cpu.txt
+++ b/doc/source/ray-overview/pip_freeze_ray-py39-cpu.txt
@@ -154,7 +154,7 @@ urllib3 @ file:///croot/urllib3_1698257533958/work
 uvicorn==0.22.0
 uvloop==0.19.0
 virtualenv==20.21.0
-watchfiles==0.19.0
+# watchfiles==0.19.0
 wcwidth==0.2.12
 websockets==11.0.3
 yarl==1.9.3
diff --git a/pyproject.toml b/pyproject.toml
new file mode 100644
index 0000000..d69f0ac
--- /dev/null
+++ b/pyproject.toml
@@ -0,0 +1,4 @@
+[build-system]
+requires = ["setuptools >= 40.6.0", "wheel", "pip", "psutil", "setproctitle==1.2.2", "colorama", "aiohttp"]
+build-backend = "ray_build_backend"
+backend-path = ["."]
diff --git a/python/ray/_private/function_manager.py b/python/ray/_private/function_manager.py
index bee0ae6..ee0e3ea 100644
--- a/python/ray/_private/function_manager.py
+++ b/python/ray/_private/function_manager.py
@@ -266,7 +266,7 @@ class FunctionActorManager:
                 "function_name": remote_function._function_name,
                 "module": function.__module__,
                 "function": pickled_function,
-                "collision_identifier": self.compute_collision_identifier(function),
+                # "collision_identifier": self.compute_collision_identifier(function), # code object is missing attribute '_varname_from_oparg'
                 "max_calls": remote_function._max_calls,
             }
         )
@@ -524,7 +524,7 @@ class FunctionActorManager:
             "module": actor_creation_function_descriptor.module_name,
             "class": serialized_actor_class,
             "job_id": job_id.binary(),
-            "collision_identifier": self.compute_collision_identifier(Class),
+            # "collision_identifier": self.compute_collision_identifier(Class), # code object is missing attribute '_varname_from_oparg'
             "actor_method_names": json.dumps(list(actor_method_names)),
         }
 
diff --git a/python/ray/_private/resource_spec.py b/python/ray/_private/resource_spec.py
index 69780aade9..3be8cbbc4c 100644
--- a/python/ray/_private/resource_spec.py
+++ b/python/ray/_private/resource_spec.py
@@ -160,9 +160,22 @@ class ResourceSpec(
         if is_head:
             resources[HEAD_NODE_RESOURCE_NAME] = 1.0
 
-        num_cpus = self.num_cpus
-        if num_cpus is None:
-            num_cpus = ray._private.utils.get_num_cpus()
+        try:
+            system_num_cpus = __graalpython__.get_max_process_count()
+            factor = min(system_num_cpus, 4)
+            num_cpus = system_num_cpus // factor
+            if self.num_cpus:
+                num_cpus = min(self.num_cpus, num_cpus)
+                if num_cpus != self.num_cpus:
+                    logger.warning(
+                        f"GraalPy: user requested {self.num_cpus} for number"
+                        "of CPUs, but GraalPy can only support up to {num_cpus} CPUs"
+                    )
+        except:
+            # We are not running on GraalPy
+            num_cpus = self.num_cpus
+            if num_cpus is None:
+                num_cpus = ray._private.utils.get_num_cpus()
 
         num_gpus = 0
         for (
diff --git a/python/ray/_private/services.py b/python/ray/_private/services.py
index 867b748..40b3fb2 100644
--- a/python/ray/_private/services.py
+++ b/python/ray/_private/services.py
@@ -1000,7 +1000,7 @@ def start_ray_process(
         stdout=stdout_file,
         stderr=stderr_file,
         stdin=subprocess.PIPE if pipe_stdin else None,
-        preexec_fn=preexec_fn if sys.platform != "win32" else None,
+        #preexec_fn=preexec_fn if sys.platform != "win32" else None,
         creationflags=CREATE_SUSPENDED if win32_fate_sharing else 0,
     )
 
diff --git a/python/ray/cloudpickle/cloudpickle.py b/python/ray/cloudpickle/cloudpickle.py
index 9c67ec6..12fda5a 100644
--- a/python/ray/cloudpickle/cloudpickle.py
+++ b/python/ray/cloudpickle/cloudpickle.py
@@ -521,10 +521,8 @@ def _walk_global_ops(code):
     """
     Yield referenced name for all global-referencing instructions in *code*.
     """
-    for instr in dis.get_instructions(code):
-        op = instr.opcode
-        if op in GLOBAL_OPS:
-            yield instr.argval
+    # GraalPy change: we don't support dis
+    yield from code.co_names
 
 
 def _extract_class_dict(cls):
diff --git a/python/ray/serve/scripts.py b/python/ray/serve/scripts.py
index 630ab7a..e95bcd6 100644
--- a/python/ray/serve/scripts.py
+++ b/python/ray/serve/scripts.py
@@ -9,7 +9,7 @@ from dataclasses import asdict
 from typing import Dict, List, Optional, Tuple
 
 import click
-import watchfiles
+# import watchfiles
 import yaml
 
 import ray
diff --git a/python/requirements.txt b/python/requirements.txt
index af77b05..f605240 100644
--- a/python/requirements.txt
+++ b/python/requirements.txt
@@ -17,7 +17,7 @@ pyyaml
 aiosignal
 frozenlist
 requests
-watchfiles
+# watchfiles
 
 # Python version-specific requirements
 grpcio == 1.54.2; sys_platform == "darwin"
@@ -58,6 +58,7 @@ starlette
 typer
 fsspec
 pandas>=1.3
-pydantic!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,<3  # Serve users can use pydantic<2
+# pydantic!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,<3  # Serve users can use pydantic<2
+pydantic==2.4.2
 py-spy>=0.2.0
-watchfiles
+# watchfiles
diff --git a/python/requirements/test-requirements.txt b/python/requirements/test-requirements.txt
index c87c1de..29d7c7f 100644
--- a/python/requirements/test-requirements.txt
+++ b/python/requirements/test-requirements.txt
@@ -112,4 +112,4 @@ threadpoolctl==3.1.0
 numexpr==2.8.4
 
 # For `serve run --reload` CLI.
-watchfiles==0.19.0
+# watchfiles==0.19.0
diff --git a/python/setup.py b/python/setup.py
index a34a39c..51a1a17 100644
--- a/python/setup.py
+++ b/python/setup.py
@@ -251,7 +251,8 @@ if setup_spec.type == SetupType.RAY:
             "grpcio >= 1.32.0; python_version < '3.10'",  # noqa:E501
             "grpcio >= 1.42.0; python_version >= '3.10'",  # noqa:E501
             "opencensus",
-            "pydantic!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,<3",
+            # "pydantic!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.*,!=2.4.*,<3",
+            "pydantic",
             "prometheus_client >= 0.7.1",
             "smart_open",
             "virtualenv >=20.0.24, !=20.21.1",  # For pip runtime env.
@@ -264,12 +265,12 @@ if setup_spec.type == SetupType.RAY:
             else "grpcio",
         ],
         "serve": [
-            "uvicorn[standard]",
+            # "uvicorn[standard]", # needs watchfiles
             "requests",
             "starlette",
             "fastapi",
             "aiorwlock",
-            "watchfiles",
+            # "watchfiles", # requires native libs embadding
         ],
         "tune": ["pandas", "tensorboardX>=1.9", "requests", pyarrow_dep, "fsspec"],
         "observability": [
@@ -520,7 +521,7 @@ def build(build_python, build_java, build_cpp):
     # version of Python to build packages inside the build.sh script. Note
     # that certain flags will not be passed along such as --user or sudo.
     # TODO(rkn): Fix this.
-    if not os.getenv("SKIP_THIRDPARTY_INSTALL"):
+    if not os.getenv("SKIP_THIRDPARTY_INSTALL") and False:
         pip_packages = ["psutil", "setproctitle==1.2.2", "colorama"]
         subprocess.check_call(
             [
@@ -535,19 +536,19 @@ def build(build_python, build_java, build_cpp):
             env=dict(os.environ, CC="gcc"),
         )
 
-    # runtime env agent dependenceis
-    runtime_env_agent_pip_packages = ["aiohttp"]
-    subprocess.check_call(
-        [
-            sys.executable,
-            "-m",
-            "pip",
-            "install",
-            "-q",
-            "--target=" + os.path.join(ROOT_DIR, RUNTIME_ENV_AGENT_THIRDPARTY_SUBDIR),
-        ]
-        + runtime_env_agent_pip_packages
-    )
+        # runtime env agent dependenceis
+        runtime_env_agent_pip_packages = ["aiohttp"]
+        subprocess.check_call(
+            [
+                sys.executable,
+                "-m",
+                "pip",
+                "install",
+                "-q",
+                "--target=" + os.path.join(ROOT_DIR, RUNTIME_ENV_AGENT_THIRDPARTY_SUBDIR),
+            ]
+            + runtime_env_agent_pip_packages
+        )
 
     bazel_flags = ["--verbose_failures"]
     if BAZEL_ARGS:
@@ -594,6 +595,9 @@ def build(build_python, build_java, build_cpp):
     if setup_spec.build_type == BuildType.TSAN:
         bazel_flags.extend(["--config=tsan"])
 
+    if os.environ.get('USE_GCC', '1') == '0':
+        bazel_flags.extend(["--config=llvm"])
+
     return bazel_invoke(
         subprocess.check_call,
         bazel_precmd_flags + ["build"] + bazel_flags + ["--"] + bazel_targets,
diff --git a/ray_build_backend.py b/ray_build_backend.py
new file mode 100644
index 0000000000..89eb8fee6f
--- /dev/null
+++ b/ray_build_backend.py
@@ -0,0 +1,155 @@
+# We need a whole custom build backend just because the setup.py is in a subdir
+import os
+import re
+import sys
+import tarfile
+import subprocess
+import shutil
+from pathlib import Path
+import venv
+
+SUB_VENV_PATH = Path(os.path.dirname(__file__)) / ('bazel-venv-' + sys.implementation.name)
+SUB_VENV_BIN = SUB_VENV_PATH / 'bin'
+SUB_VENV_PYTHON = SUB_VENV_BIN / 'python3'
+
+BAZEL = "bazel"
+
+def install_thirdparty_pkgs():
+    # During the installation process `pip` isn't available to use,
+    # So, we create a new environment to have access for fresh `pip` during bazel build.
+    if not os.path.isdir(SUB_VENV_PATH):
+        venv.create(SUB_VENV_PATH, with_pip=True)
+    print('Using virtual env in:\n\t' + str(SUB_VENV_PATH))
+    env = dict(os.environ)
+    env['PATH'] = os.pathsep.join([str(SUB_VENV_BIN), *os.environ.get("PATH", "").split(os.pathsep)])
+    env['VIRTUAL_ENV'] = str(SUB_VENV_PATH)
+    del_keys = [
+        'PIP_BUILD_TRACKER',
+        'PEP517_BUILD_BACKEND',
+        'PEP517_BACKEND_PATH',
+        'PYTHONPATH',
+        'PYTHONNOUSERSITE',
+    ]
+    for k in del_keys:
+        if k in env:
+            del env[k]
+
+    assert os.path.isdir(str(SUB_VENV_BIN))
+
+    THIRDPARTY_SUBDIR = os.path.join("ray", "thirdparty_files")
+    RUNTIME_ENV_AGENT_THIRDPARTY_SUBDIR = os.path.join(
+        "ray", "_private", "runtime_env", "agent", "thirdparty_files"
+    )
+
+    CLEANABLE_SUBDIRS = [
+        THIRDPARTY_SUBDIR,
+        RUNTIME_ENV_AGENT_THIRDPARTY_SUBDIR,
+        os.path.join("ray", "_raylet.so"),
+        os.path.join("ray", "cpp"),
+        "build",
+    ]
+
+    ROOT_DIR = os.path.join(os.path.dirname(__file__), 'python')
+    for subdir in CLEANABLE_SUBDIRS:
+        try:
+            shutil.rmtree(os.path.join(ROOT_DIR, subdir))
+        except:
+            pass
+
+    # copied from python/setup.py:523
+    pip_packages = ["psutil", "setproctitle==1.2.2", "colorama"]
+    subprocess.check_call(
+        [
+            str(SUB_VENV_PYTHON),
+            "-m",
+            "pip",
+            "install",
+            "-q",
+            "--target=" + os.path.join(ROOT_DIR, THIRDPARTY_SUBDIR),
+        ]
+        + pip_packages,
+        env=dict(os.environ, CC="gcc"),
+    )
+
+    runtime_env_agent_pip_packages = ["aiohttp"]
+    subprocess.check_call(
+        [
+            str(SUB_VENV_PYTHON),
+            "-m",
+            "pip",
+            "install",
+            "-q",
+            "--target=" + os.path.join(ROOT_DIR, RUNTIME_ENV_AGENT_THIRDPARTY_SUBDIR),
+        ]
+        + runtime_env_agent_pip_packages
+    )
+
+def build_sdist(sdist_directory, config_settings=None):
+    nv = 'ray-2.9.1'
+    srcdir = Path(__file__).parent
+    archive_path = Path(sdist_directory) / f'{nv}.tar.gz'
+
+    def tarfilter(info):
+        if re.match(r'\./(?:.git|bazel-|venv|[^-/]+-venv|dist)', info.name):
+            return None
+        info.name = f'./{nv}/{info.name}'
+        return info
+
+    with tarfile.open(archive_path, 'w:gz') as tar:
+        tar.add('.', filter=tarfilter)
+    return archive_path.name
+
+llvm_bazel_conf = """
+build:llvm --action_env='BAZEL_COMPILER={LLVM_HOME}/bin/clang'
+build:llvm --action_env='CC={LLVM_HOME}/bin/clang'
+build:llvm --action_env='CXX={LLVM_HOME}/bin/clang++'
+build:llvm --action_env='LLVM_CONFIG={LLVM_HOME}/bin/llvm-config'
+build:llvm --repo_env='LLVM_CONFIG={LLVM_HOME}/bin/llvm-config'
+build:llvm --linkopt='-fuse-ld={LLVM_HOME}/bin/ld.lld'
+build:llvm --linkopt='-L{LLVM_HOME}/lib'
+build:llvm --linkopt='-Wl,-rpath,{LLVM_HOME}/lib'
+"""
+
+
+def build_wheel(wheel_directory, config_settings=None, metadata_directory=None):
+    install_thirdparty_pkgs()
+    wheel_directory = Path(wheel_directory).absolute()
+    os.chdir('python')
+    env = os.environ.copy()
+    env['SKIP_THIRDPARTY_INSTALL'] = 'true'
+    use_gcc = env.get('USE_GCC', '0')
+    if use_gcc == '0':
+        llvm_home = env.get('LLVM_HOME', '')
+        if llvm_home == '':
+            clang_path = shutil.which('clang')
+            if clang_path:        
+                bin_path = os.path.dirname(clang_path)
+                llvm_home = os.path.dirname(bin_path)
+        if llvm_home:
+            use_gcc = '0'
+            with open(os.path.join(os.path.dirname(__file__), '.llvm-local.bazelrc'), 'w') as fp:
+                fp.write(llvm_bazel_conf.format(LLVM_HOME=llvm_home))
+        else:
+            # we didn't find clang
+            use_gcc = '1'
+    
+    env['USE_GCC'] = use_gcc
+
+    if not os.environ.get('BAZEL_LIMIT_CPUS'):
+        try:
+            system_num_cpus = __graalpython__.get_max_process_count()
+            env['BAZEL_LIMIT_CPUS'] = '%d' % system_num_cpus
+        except:
+            # do not limit bazel
+            pass
+    try:
+        if os.path.isdir(Path('dist')):
+            shutil.rmtree(Path('dist'))
+        subprocess.run([sys.executable, 'setup.py', 'bdist_wheel'], env=env, check=True)
+        wheels = list(Path('dist').glob('*.whl'))
+        assert len(wheels) == 1, f"Expected 1 wheel, found {len(wheels)}"
+        wheel = wheels[0]
+        shutil.copyfile(wheel, wheel_directory / wheel.name)
+        return str(wheel.name)
+    finally:
+        os.chdir('..')
diff --git a/src/ray/util/logging.cc b/src/ray/util/logging.cc
index f41aa65..f8e895d 100644
--- a/src/ray/util/logging.cc
+++ b/src/ray/util/logging.cc
@@ -374,6 +374,7 @@ bool RayLog::IsFailureSignalHandlerEnabled() {
 }
 
 void RayLog::InstallFailureSignalHandler(const char *argv0, bool call_previous_handler) {
+    /*
 #ifdef _WIN32
   // If process fails to initialize, don't display an error window.
   SetErrorMode(GetErrorMode() | SEM_FAILCRITICALERRORS);
@@ -389,6 +390,7 @@ void RayLog::InstallFailureSignalHandler(const char *argv0, bool call_previous_h
   options.writerfn = WriteFailureMessage;
   absl::InstallFailureSignalHandler(options);
   is_failure_signal_handler_installed_ = true;
+  */
 }
 
 void RayLog::InstallTerminateHandler() { std::set_terminate(TerminateHandler); }
