diff --git a/pip/__init__.py b/pip/__init__.py
index 6633ef7..d7c21db 100644
--- a/pip/__init__.py
+++ b/pip/__init__.py
@@ -11,3 +11,6 @@ def main(args: Optional[List[str]] = None) -> int:
     from pip._internal.utils.entrypoints import _wrapper
 
     return _wrapper(args)
+
+
+__GRAALPY_PATCHED = True
diff --git a/pip/_internal/cli/cmdoptions.py b/pip/_internal/cli/cmdoptions.py
index 02ba608..85c7c22 100644
--- a/pip/_internal/cli/cmdoptions.py
+++ b/pip/_internal/cli/cmdoptions.py
@@ -357,7 +357,8 @@ def extra_index_url() -> Option:
         dest="extra_index_urls",
         metavar="URL",
         action="append",
-        default=[],
+        # GraalPy change: add default extra index with our prebuilt binaries
+        default=["https://www.graalvm.org/python/wheels/"],
         help="Extra URLs of package indexes to use in addition to "
         "--index-url. Should follow the same rules as "
         "--index-url.",
@@ -892,7 +893,7 @@ disable_pip_version_check: Callable[..., Option] = partial(
     "--disable-pip-version-check",
     dest="disable_pip_version_check",
     action="store_true",
-    default=False,
+    default=True, # GraalPy: we do not want to incentivize the upgrade
     help="Don't periodically check PyPI to determine whether a new version "
     "of pip is available for download. Implied with --no-index.",
 )
diff --git a/pip/_internal/index/package_finder.py b/pip/_internal/index/package_finder.py
index b6f8d57..6c37e0b 100644
--- a/pip/_internal/index/package_finder.py
+++ b/pip/_internal/index/package_finder.py
@@ -35,6 +35,7 @@ from pip._internal.utils.logging import indent_log
 from pip._internal.utils.misc import build_netloc
 from pip._internal.utils.packaging import check_requires_python
 from pip._internal.utils.unpacking import SUPPORTED_EXTENSIONS
+from pip._internal.utils.graalpy import apply_graalpy_sort_order, get_graalpy_candidates
 
 if TYPE_CHECKING:
     from pip._vendor.typing_extensions import TypeGuard
@@ -487,6 +488,7 @@ class CandidateEvaluator:
 
         return sorted(filtered_applicable_candidates, key=self._sort_key)
 
+    @apply_graalpy_sort_order
     def _sort_key(self, candidate: InstallationCandidate) -> CandidateSortingKey:
         """
         Function to pass as the `key` argument to a call to sorted() to sort
@@ -852,8 +854,11 @@ class PackageFinder:
 
             logger.debug("Local files found: %s", ", ".join(paths))
 
+        # We add links for few packages that don't publish sdists
+        graalpy_candidates = get_graalpy_candidates(project_name)
+
         # This is an intentional priority ordering
-        return file_candidates + page_candidates
+        return file_candidates + page_candidates + graalpy_candidates
 
     def make_candidate_evaluator(
         self,
diff --git a/pip/_internal/network/download.py b/pip/_internal/network/download.py
index 79b82a5..3ee418a 100644
--- a/pip/_internal/network/download.py
+++ b/pip/_internal/network/download.py
@@ -6,6 +6,7 @@ import mimetypes
 import os
 from typing import Iterable, Optional, Tuple
 
+from pip._internal.utils.graalpy import AddedSourceLink
 from pip._vendor.requests.models import CONTENT_CHUNK_SIZE, Response
 
 from pip._internal.cli.progress_bars import get_download_progress_renderer
@@ -98,7 +99,7 @@ def _get_http_response_filename(resp: Response, link: Link) -> str:
     filename = link.filename  # fallback
     # Have a look at the Content-Disposition header for a better guess
     content_disposition = resp.headers.get("content-disposition")
-    if content_disposition:
+    if content_disposition and not isinstance(link, AddedSourceLink):
         filename = parse_content_disposition(content_disposition, filename)
     ext: Optional[str] = splitext(filename)[1]
     if not ext:
diff --git a/pip/_internal/operations/install/wheel.py b/pip/_internal/operations/install/wheel.py
index a8cd133..20dd1e6 100644
--- a/pip/_internal/operations/install/wheel.py
+++ b/pip/_internal/operations/install/wheel.py
@@ -591,6 +591,9 @@ def _install_wheel(
         file.save()
         record_installed(file.src_record_path, file.dest_path, file.changed)
 
+    from pip._internal.utils.graalpy import apply_graalpy_patches
+    apply_graalpy_patches(wheel_path, lib_dir)
+
     def pyc_source_file_paths() -> Generator[str, None, None]:
         # We de-duplicate installation paths, since there can be overlap (e.g.
         # file in .data maps to same location as file in wheel root).
diff --git a/pip/_internal/utils/graalpy.py b/pip/_internal/utils/graalpy.py
new file mode 100644
index 0000000..6561986
--- /dev/null
+++ b/pip/_internal/utils/graalpy.py
@@ -0,0 +1,219 @@
+# ATTENTION: GraalPy uses existence of this module to verify that it is
+# running a patched pip in pip_hook.py
+import os
+import re
+import zipfile
+from pathlib import Path
+from urllib.parse import urlparse
+
+from pip._internal.models.candidate import InstallationCandidate
+from pip._internal.models.link import Link
+from pip._vendor import tomli
+from pip._vendor.packaging.specifiers import SpecifierSet
+from pip._vendor.packaging.version import VERSION_PATTERN
+
+PATCHES_BASE_DIRS = [os.path.join(__graalpython__.core_home, "patches")]
+if hasattr(__graalpython__, "tdebug"):
+    PATCHES_BASE_DIRS += os.environ.get('PIPLOADER_PATCHES_BASE_DIRS', "").split(",")
+
+DISABLE_PATCHING = os.environ.get('PIP_GRAALPY_DISABLE_PATCHING', '').lower() in ('true', '1')
+DISABLE_VERSION_SELECTION = os.environ.get('PIP_GRAALPY_DISABLE_VERSION_SELECTION', '').lower() in ('true', '1')
+
+
+def normalize_name(name):
+    return re.sub('[-_.]+', '-', name).lower()
+
+
+class PatchRepository:
+    def __init__(self, base_dirs):
+        self._repository = {}
+        for base_dir in base_dirs:
+            for package_dir in Path(base_dir).iterdir():
+                denormalized_name = package_dir.name
+                normalized_name = normalize_name(denormalized_name)
+                metadata = {}
+                if (metadata_path := package_dir / 'metadata.toml').is_file():
+                    with open(metadata_path, 'rb') as f:
+                        metadata = tomli.load(f)
+                    metadata.setdefault('rules', [])
+                    for rule in metadata['rules']:
+                        if 'patch' in rule:
+                            rule['patch'] = package_dir / rule['patch']
+                self._repository[normalized_name] = metadata
+
+    def rule_applicable(self, rule):
+        if not __graalpython__.use_system_toolchain and rule.get('ignore-rule-on-llvm'):
+            return False
+        return True
+
+    def get_rules(self, name):
+        if metadata := self._repository.get(normalize_name(name)):
+            return [rule for rule in metadata['rules'] if self.rule_applicable(rule)]
+
+    def get_add_sources(self, name):
+        if metadata := self._repository.get(normalize_name(name)):
+            return metadata.get('add-sources')
+
+    def get_priority_for_version(self, name, version):
+        if rules := self.get_rules(name):
+            for rule in rules:
+                if self.rule_matches_version(rule, version):
+                    return rule.get('install-priority', 1)
+        return 0
+
+    @staticmethod
+    def rule_matches_version(rule, version):
+        return not rule.get('version') or SpecifierSet(rule['version']).contains(version)
+
+    def get_suggested_version_specs(self, name):
+        versions = set()
+        if rules := self.get_rules(name):
+            for rule in rules:
+                if 'patch' in rule and rule.get('install-priority', 1) > 0 and (version := rule.get('version')):
+                    versions.add(version)
+        return versions
+
+    def get_matching_rule(self, name, requested_version, dist_type):
+        if metadata := self.get_rules(name):
+            for rule in metadata:
+                if rule.get('dist-type', dist_type) != dist_type:
+                    continue
+                if not self.rule_matches_version(rule, requested_version):
+                    continue
+                return rule
+
+
+__PATCH_REPOSITORY = None
+
+
+def get_patch_repository():
+    global __PATCH_REPOSITORY
+    if not __PATCH_REPOSITORY:
+        __PATCH_REPOSITORY = PatchRepository(PATCHES_BASE_DIRS)
+    return __PATCH_REPOSITORY
+
+
+def apply_graalpy_patches(filename, location):
+    """
+    Applies any GraalPy patches to package extracted from 'filename' into 'location'.
+    Note that 'location' must be the parent directory of the package directory itself.
+    For example: /path/to/site-package and not /path/to/site-packages/mypackage.
+    """
+    if DISABLE_PATCHING:
+        return
+
+    # we expect filename to be something like "pytest-5.4.2-py3-none-any.whl"
+    archive_name = os.path.basename(filename)
+    name_ver_match = re.match(fr"^(?P<name>.*?)-(?P<version>{VERSION_PATTERN}).*?\.(?P<suffix>tar\.gz|tar|whl|zip)$",
+                              archive_name, re.VERBOSE | re.I)
+    if not name_ver_match:
+        print(f"GraalPy warning: could not parse package name, version, or format from {archive_name!r}.\n"
+              "Could not determine if any GraalPy specific patches need to be applied.")
+        return
+
+    name = name_ver_match.group('name')
+    version = name_ver_match.group('version')
+    suffix = name_ver_match.group('suffix')
+    is_wheel = suffix == "whl"
+
+    if is_wheel and is_wheel_marked(filename):
+        # We already processed it when building from source
+        return
+
+    import autopatch_capi
+    import subprocess
+
+    autopatch_capi.auto_patch_tree(location)
+
+    print(f"Looking for GraalPy patches for {name}")
+    repository = get_patch_repository()
+
+    if is_wheel:
+        # patches intended for binary distribution:
+        rule = repository.get_matching_rule(name, version, 'wheel')
+    else:
+        # patches intended for source distribution if applicable
+        rule = repository.get_matching_rule(name, version, 'sdist')
+        if not rule:
+            rule = repository.get_matching_rule(name, version, 'wheel')
+        if rule and (subdir := rule.get('subdir')):
+            # we may need to change wd if we are actually patching a source distribution
+            # with a patch intended for a binary distribution, because in the source
+            # distribution the actual deployed sources may be in a subdirectory (typically "src")
+            location = os.path.join(location, subdir)
+    if rule:
+        if patch := rule.get('patch'):
+            print(f"Patching package {name} using {patch}")
+            exe = '.exe' if os.name == 'nt' else ''
+            try:
+                subprocess.run([f"patch{exe}", "-f", "-d", location, "-p1", "-i", str(patch)], check=True)
+            except FileNotFoundError:
+                print(
+                    "WARNING: GraalPy needs the 'patch' utility to apply compatibility patches. Please install it using your system's package manager.")
+            except subprocess.CalledProcessError:
+                print(f"Applying GraalPy patch failed for {name}. The package may still work.")
+    elif version_specs := repository.get_suggested_version_specs(name):
+        print("We have patches to make this package work on GraalVM for some version(s).")
+        print("If installing or running fails, consider using one of the versions that we have patches for:")
+        for version_spec in version_specs:
+            print(f'{name} {version_spec}')
+
+
+def apply_graalpy_sort_order(sort_key_func):
+    if DISABLE_VERSION_SELECTION:
+        return sort_key_func
+
+    def wrapper(self, candidate):
+        default_sort_key = sort_key_func(self, candidate)
+        priority = get_patch_repository().get_priority_for_version(candidate.name, str(candidate.version))
+        return priority, default_sort_key
+
+    return wrapper
+
+
+class AddedSourceLink(Link):
+    def __init__(self, url: str, filename: str):
+        super().__init__(url)
+        self._filename = filename
+
+    @property
+    def filename(self) -> str:
+        return self._filename
+
+
+def get_graalpy_candidates(name):
+    repository = get_patch_repository()
+    candidates = []
+    for add_source in repository.get_add_sources(name) or []:
+        version = add_source['version']
+        url = add_source['url']
+        match = re.search(r'\.(tar\.(?:gz|bz2|xz)|zip|whl)$', urlparse(url).path)
+        assert match, "Couldn't determine URL suffix"
+        suffix = match.group(1)
+        # We need to force the filename to match the usual convention, otherwise we won't find a patch
+        link = AddedSourceLink(url, f'{name}-{version}.{suffix}')
+        candidates.append(InstallationCandidate(name=name, version=version, link=link))
+    return candidates
+
+
+MARKER_NAME = 'GRAALPY_MARKER'
+
+
+def mark_wheel(path):
+    if DISABLE_PATCHING:
+        return
+    with zipfile.ZipFile(path, 'a') as z:
+        dist_info = None
+        for name in z.namelist():
+            if m := re.match(r'([^/]+.dist-info)/', name):
+                dist_info = m.group(1)
+                break
+        assert dist_info, "Cannot find .dist_info in built wheel"
+        marker = f'{dist_info}/{MARKER_NAME}'
+        with z.open(marker, 'w'):
+            pass
+
+
+def is_wheel_marked(path):
+    with zipfile.ZipFile(path) as z:
+        return any(re.match(rf'[^/]+.dist-info/{MARKER_NAME}$', f) for f in z.namelist())
diff --git a/pip/_internal/utils/unpacking.py b/pip/_internal/utils/unpacking.py
index 78b5c13..18a184c 100644
--- a/pip/_internal/utils/unpacking.py
+++ b/pip/_internal/utils/unpacking.py
@@ -255,3 +255,5 @@ def unpack_file(
             content_type,
         )
         raise InstallationError(f"Cannot determine archive format of {location}")
+    from pip._internal.utils.graalpy import apply_graalpy_patches
+    apply_graalpy_patches(filename, location)
diff --git a/pip/_internal/wheel_builder.py b/pip/_internal/wheel_builder.py
index 60d75dd..bdf4231 100644
--- a/pip/_internal/wheel_builder.py
+++ b/pip/_internal/wheel_builder.py
@@ -7,6 +7,7 @@ import re
 import shutil
 from typing import Iterable, List, Optional, Tuple
 
+from pip._internal.utils import graalpy
 from pip._vendor.packaging.utils import canonicalize_name, canonicalize_version
 from pip._vendor.packaging.version import InvalidVersion, Version
 
@@ -115,6 +116,10 @@ def _should_cache(
     if _contains_egg_info(base):
         return True
 
+    # GraalPy change
+    if isinstance(req.link, graalpy.AddedSourceLink):
+        return True
+
     # Otherwise, do not cache.
     return False
 
@@ -248,6 +253,11 @@ def _build_one_inside_env(
             )
 
         if wheel_path is not None:
+            # GraalPy change: watermark wheels that we built so that we don't try to patch them when installing
+            # Note: we currently don't patch source builds from SCM links, so we don't watermark them so that they can
+            # get patched with a wheel patch
+            if not req.link.is_vcs:
+                graalpy.mark_wheel(wheel_path)
             wheel_name = os.path.basename(wheel_path)
             dest_path = os.path.join(output_dir, wheel_name)
             try:
diff --git a/pip/_vendor/packaging/tags.py b/pip/_vendor/packaging/tags.py
index 9a3d25a..e0e7b31 100644
--- a/pip/_vendor/packaging/tags.py
+++ b/pip/_vendor/packaging/tags.py
@@ -4,6 +4,7 @@
 
 import logging
 import platform
+import struct
 import sys
 import sysconfig
 from importlib.machinery import EXTENSION_SUFFIXES
@@ -36,7 +37,7 @@ INTERPRETER_SHORT_NAMES: Dict[str, str] = {
 }
 
 
-_32_BIT_INTERPRETER = sys.maxsize <= 2 ** 32
+_32_BIT_INTERPRETER = struct.calcsize("P") == 4
 
 
 class Tag:
@@ -224,10 +225,46 @@ def cpython_tags(
                 yield Tag(interpreter, "abi3", platform_)
 
 
-def _generic_abi() -> Iterator[str]:
-    abi = sysconfig.get_config_var("SOABI")
-    if abi:
-        yield _normalize_string(abi)
+# GraalVM change: backported change from pypa/packaging
+def _generic_abi() -> List[str]:
+    """
+    Return the ABI tag based on EXT_SUFFIX.
+    """
+    # The following are examples of `EXT_SUFFIX`.
+    # We want to keep the parts which are related to the ABI and remove the
+    # parts which are related to the platform:
+    # - linux:   '.cpython-310-x86_64-linux-gnu.so' => cp310
+    # - mac:     '.cpython-310-darwin.so'           => cp310
+    # - win:     '.cp310-win_amd64.pyd'             => cp310
+    # - win:     '.pyd'                             => cp37 (uses _cpython_abis())
+    # - pypy:    '.pypy38-pp73-x86_64-linux-gnu.so' => pypy38_pp73
+    # - graalpy: '.graalpy-38-native-x86_64-darwin.dylib'
+    #                                               => graalpy_38_native
+
+    ext_suffix = _get_config_var("EXT_SUFFIX", warn=True)
+    if not isinstance(ext_suffix, str) or ext_suffix[0] != ".":
+        raise SystemError("invalid sysconfig.get_config_var('EXT_SUFFIX')")
+    parts = ext_suffix.split(".")
+    if len(parts) < 3:
+        # CPython3.7 and earlier uses ".pyd" on Windows.
+        return _cpython_abis(sys.version_info[:2])
+    soabi = parts[1]
+    if soabi.startswith("cpython"):
+        # non-windows
+        abi = "cp" + soabi.split("-")[1]
+    elif soabi.startswith("cp"):
+        # windows
+        abi = soabi.split("-")[0]
+    elif soabi.startswith("pypy"):
+        abi = "-".join(soabi.split("-")[:2])
+    elif soabi.startswith("graalpy"):
+        abi = "-".join(soabi.split("-")[:3])
+    elif soabi:
+        # pyston, ironpython, others?
+        abi = soabi
+    else:
+        return []
+    return [_normalize_string(abi)]
 
 
 def generic_tags(
diff --git a/pip/_vendor/platformdirs/api.py b/pip/_vendor/platformdirs/api.py
index d64ebb9..3655f3d 100644
--- a/pip/_vendor/platformdirs/api.py
+++ b/pip/_vendor/platformdirs/api.py
@@ -71,7 +71,7 @@ class PlatformDirsABC(ABC):
     def _append_app_name_and_version(self, *base: str) -> str:
         params = list(base[1:])
         if self.appname:
-            params.append(self.appname)
+            params.append(f'{self.appname}-graalpy')
             if self.version:
                 params.append(self.version)
         path = os.path.join(base[0], *params)  # noqa: PTH118
